[{"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\index.js":"1","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\App.js":"2","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Chat\\Chat.js":"3","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Join\\Join.js":"4","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Input\\Input.js":"5","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\InforBar\\InforBar.js":"6","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Messages\\Messages.js":"7","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Messages\\Message\\Message.js":"8","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\TextContainer\\TextContainer.js":"9","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Board\\Board.js":"10"},{"size":152,"mtime":1611253967070,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1612476879942,"results":"13","hashOfConfig":"12"},{"size":3448,"mtime":1613156421902,"results":"14","hashOfConfig":"12"},{"size":1270,"mtime":1613103211691,"results":"15","hashOfConfig":"12"},{"size":587,"mtime":1612836786460,"results":"16","hashOfConfig":"12"},{"size":575,"mtime":1612828250679,"results":"17","hashOfConfig":"12"},{"size":391,"mtime":1612843002354,"results":"18","hashOfConfig":"12"},{"size":1015,"mtime":1612842335632,"results":"19","hashOfConfig":"12"},{"size":996,"mtime":1612988017100,"results":"20","hashOfConfig":"12"},{"size":4574,"mtime":1613103508424,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"4yxod1",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\index.js",[],["45","46"],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\App.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Chat\\Chat.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Join\\Join.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Input\\Input.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\InforBar\\InforBar.js",["47","48"],"import React from 'react';\r\n\r\nimport closeIcon from '../../icons/closeIcon.png';\r\nimport onlineIcon from '../../icons/onlineIcon.png';\r\n\r\nimport './InfoBar.css';\r\n\r\nconst InfoBar = ({ room }) =>(\r\n    <div className=\"infoBar\">\r\n        <div className=\"leftInnerContainer\">\r\n            <img className=\"onlineIcon\" src={onlineIcon} alt=\"online image\" />\r\n            <h3>{ room }</h3>\r\n        </div>\r\n        <div className=\"rightInnerContainer\">\r\n            <a href=\"/\"><img src={closeIcon} alt=\"close image\" /></a>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default InfoBar;","C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Messages\\Messages.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Messages\\Message\\Message.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\TextContainer\\TextContainer.js",[],"C:\\Users\\brayan\\projects\\Sand_Castle\\client\\src\\components\\Board\\Board.js",["49","50","51"],"import React, {useEffect, useState, useRef} from 'react';\r\n\r\nimport './Board.css';\r\n\r\n\r\nconst Board = ({ color, size, base64ImageData, imgFlag, setColor, setSize, setBase64ImageData, setImgFlag, sendImage }) =>{\r\n    //example of refrence keep track of refrence to elements or any kind of information really\r\n    const canvasRef = useRef(null);\r\n    const contextRef = useRef(null);\r\n    const boardContainerRef = useRef(null);\r\n    const timeoutRef = useRef()\r\n    const [isDrawing, setIsDrawing] = useState(false);\r\n    //refrence helped fix a bug as board is being constantly refreshed Keep a note of that\r\n    const mouse = useRef({x: 0, y: 0});\r\n    const last_mouse = useRef({x: 0, y: 0});\r\n\r\n    useEffect(() =>{\r\n        const canvas = canvasRef.current;\r\n        canvas.width = parseInt(getComputedStyle(boardContainerRef.current).getPropertyValue('width'));\r\n        canvas.height = parseInt(getComputedStyle(boardContainerRef.current).getPropertyValue('height'));\r\n        canvasRef.current.addEventListener('mousemove', function(e) {\r\n            last_mouse.current.x = mouse.current.x;\r\n            last_mouse.current.y = mouse.current.y;\r\n    \r\n            mouse.current.x = e.pageX - this.offsetLeft;\r\n            mouse.current.y = e.pageY - this.offsetTop;\r\n        }, false);\r\n\r\n        const context =canvas.getContext(\"2d\");\r\n        context.lineWidth = size;\r\n        context.lineJoin = 'round';\r\n        context.lineCap = 'round';\r\n        context.strokeStyle = color;\r\n        contextRef.current = context;\r\n    }, [])\r\n\r\n    useEffect(() =>{\r\n        if(!imgFlag){return}\r\n        var interval = setInterval(function(){\r\n            if(isDrawing) return;\r\n            setIsDrawing(true);\r\n            clearInterval(interval);\r\n            var image = new Image();\r\n            image.onload = function() {\r\n                contextRef.current.drawImage(image, 0, 0);\r\n                setIsDrawing(false);\r\n            };\r\n            image.src = base64ImageData;\r\n            setImgFlag(false);\r\n        }, 200)\r\n\r\n    },[imgFlag])\r\n    \r\n\r\n    useEffect(() =>{\r\n        contextRef.current.lineWidth = size;\r\n        contextRef.current.strokeStyle = color;\r\n    },[color,size])\r\n    \r\n    const startDrawing  = () =>{\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(last_mouse.current.x, last_mouse.current.y);\r\n        console.log(last_mouse.current.x, last_mouse.current.y);\r\n        setIsDrawing(true);\r\n    }\r\n\r\n    const finishDrawing  = () =>{\r\n        contextRef.current.closePath();\r\n        setIsDrawing(false);\r\n    }\r\n    \r\n    const draw = () =>{\r\n        if(!isDrawing){\r\n            return\r\n        }\r\n        contextRef.current.lineTo(mouse.current.x, mouse.current.y);\r\n        contextRef.current.stroke();\r\n        \r\n        if(timeoutRef.current != undefined) clearTimeout(timeoutRef.current);\r\n        timeoutRef.current = setTimeout(function(){\r\n            console.log('img saved');\r\n            setBase64ImageData(canvasRef.current.toDataURL(\"image/png\"));\r\n            sendImage();\r\n            clearTimeout(timeoutRef.current);\r\n        }, 1000)\r\n        \r\n    }\r\n    \r\n    //using hooks for inputs\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"tools-section\">\r\n                <div className=\"colorPickerContainer\">\r\n                    <input type=\"color\"\r\n                    value={color}\r\n                    onChange={(event) => setColor(event.target.value)}\r\n                    ></input>\r\n                </div>\r\n                <div className=\"brushsize-container\">\r\n                        Select Brush Size : &nbsp; \r\n                        <select value={size} onChange={(event) => setSize(event.target.value)}>\r\n                            <option> 5 </option>\r\n                            <option> 10 </option>\r\n                            <option> 15 </option>\r\n                            <option> 20 </option>\r\n                            <option> 25 </option>\r\n                            <option> 30 </option>\r\n                        </select>\r\n                    </div>\r\n                    </div>\r\n                <div className=\"boardContainer\" id=\"boardContainer\" ref={boardContainerRef}>\r\n                    <canvas className=\"board\" id=\"board\"\r\n                        ref={canvasRef}\r\n                        onMouseDown={startDrawing}\r\n                        onMouseUp={finishDrawing}\r\n                        onMouseMove={draw}\r\n                    ></canvas>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":11,"column":13,"nodeType":"58","endLine":11,"endColumn":79},{"ruleId":"56","severity":1,"message":"57","line":15,"column":25,"nodeType":"58","endLine":15,"endColumn":66},{"ruleId":"59","severity":1,"message":"60","line":35,"column":8,"nodeType":"61","endLine":35,"endColumn":10,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":52,"column":7,"nodeType":"61","endLine":52,"endColumn":16,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":79,"column":31,"nodeType":"67","messageId":"68","endLine":79,"endColumn":33},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'color' and 'size'. Either include them or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has missing dependencies: 'base64ImageData', 'isDrawing', and 'setImgFlag'. Either include them or remove the dependency array. If 'setImgFlag' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["72"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [color, size]",{"range":"77","text":"78"},"Update the dependencies array to be: [base64ImageData, imgFlag, isDrawing, setImgFlag]",{"range":"79","text":"80"},[1537,1539],"[color, size]",[2042,2051],"[base64ImageData, imgFlag, isDrawing, setImgFlag]"]